{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardArray","map","r","i","key","SearchBox","search","type","placeholder","onChange","Scroll","props","children","App","useState","searchfield","robot","setRobots","getRobots","a","fetch","then","response","json","users","useEffect","filterRobots","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yOAceA,G,MAZF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACtB,OACQ,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BJ,GAAMK,IAAI,SAASF,UAAU,UAC/D,6BACI,4BAAKF,GACL,2BAAIC,OCQTI,EAbG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAGC,GAC7B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAIlF,OACI,6BACKM,ICCEK,EAVG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGhB,OACI,6BACI,2BAAOb,KAAK,SAASc,KAAK,SAASC,YAAY,iBAAiBC,SAAUH,MCGvEI,EARA,SAACC,GACZ,OACI,yBAAKhB,UAAU,UACVgB,EAAMC,WC+CJC,MA5Cf,WAAgB,IAAD,EAEgBC,mBAAS,CACpCZ,EAAG,GACHa,YAAa,KAJF,mBAELC,EAFK,KAEEC,EAFF,KAOPC,EAAS,uCAAG,sBAAAC,EAAA,sEACVC,MAAM,8CAA8CC,MAAK,SAAAC,GAC5D,OAAOA,EAASC,UAChBF,MAAK,SAAAG,GACNP,EAAU,eACLD,EADI,CAEPd,EAAGsB,QANS,2CAAH,qDAWfC,qBAAU,WACRP,MACC,IAEH,IAOMQ,EAAeV,EAAMd,EAAEyB,QAAO,SAAAzB,GAClC,OAAOA,EAAET,KAAKmC,cAAcC,SAASb,EAAMD,YAAYa,kBAGzD,OACE,yBAAKjC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWW,OAdM,SAAAwB,GACnBb,EAAU,eACLD,EADI,CAEPD,YAAae,EAAEC,OAAOC,YAYtB,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjC,OAAQ2B,OClCJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ad954279.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\n\r\nconst Card = ({ id, name, email}) => {\r\n    return (\r\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img src={`https://robohash.org/${id}`} alt=\"robots\" className='robot'/>\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>            \r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n const CardList = ({robots}) => {\r\n    const cardArray = robots.map((r, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    }) \r\n\r\n    \r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({search}) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input name='search' type=\"search\" placeholder='Search a robot' onChange={search} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='scroll'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/Scroll';\n\nfunction App() {\n\n  const [ robot, setRobots ] = useState({\n    r: [],\n    searchfield: ''\n  });\n\n  const getRobots = async () => {\n    await fetch('https://jsonplaceholder.typicode.com/users').then(response=> {\n       return response.json();\n    }).then(users => {\n      setRobots({\n        ...robot,\n        r: users\n      })\n    })\n  }\n\n  useEffect(() => {\n    getRobots();\n  }, [])\n   \n  const searchChange = e => {\n    setRobots({\n      ...robot,\n      searchfield: e.target.value\n    })\n  }\n\n  const filterRobots = robot.r.filter(r => {\n    return r.name.toLowerCase().includes(robot.searchfield.toLowerCase());\n  })\n\n  return (\n    <div className='tc'>\n      <h1>RoboFriends</h1>\n      <SearchBox search={searchChange}/>\n      <Scroll>\n      <CardList robots={filterRobots} />\n      </Scroll>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}